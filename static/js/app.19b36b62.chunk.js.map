{"version":3,"sources":["components/hangman-drawing/component.tsx","components/word-to-guess/component.tsx","components/keyboard/component.tsx","App.tsx"],"names":["styles","StyleSheet","create","container","position","head","width","height","borderRadius","border","top","right","body","backgroundColor","rightArm","rotate","transformOrigin","leftArm","rightLeg","leftLeg","background","BODY_PARTS","View","style","transform","HangmanDrawing","numberOfGuesses","slice","marginLeft","letterPlaceHolder","display","flexDirection","gap","fontSize","fontWeight","textTransform","fontFamily","bottom","borderBottomColor","borderBottomWidth","letterStyles","guessedLetters","letter","reveal","charStyle","opacity","includes","color","WordToGuess","wordToGuess","split","map","index","board","flexWrap","btn","active","inactive","KEYS","Keyboard","activeLetters","inactiveLetters","addGuessedLetter","disabled","key","isActive","isInactive","Button","onPress","title","gameContainer","maxWidth","margin","alignItems","clueContainer","gameResult","textAlign","clue","getSong","words","Math","floor","random","length","App","useState","songToGuess","setSongToGuess","songTitle","songArtist","artist","songAlbum","album","songYear","year","setGuessedLetters","showSongArtist","setShowSongArtist","showSongAlbum","setShowSongAlbum","showSongYear","setShowSongYear","incorrectLetters","filter","isLoser","isWinner","every","useCallback","currentLetters","useEffect","handler","e","match","preventDefault","document","addEventListener","removeEventListener","Text","alignSelf"],"mappings":"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","file":"static/js/app.19b36b62.chunk.js","sourcesContent":["import { View, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: { position: 'relative' },\n  head: {\n    width: '50px',\n    height: '50px',\n    borderRadius: 100,\n    border: '10px solid black',\n    position: 'absolute',\n    top: '50px',\n    right: '-20px',\n  },\n  body: {\n    width: '10px',\n    height: '100px',\n    backgroundColor: 'black',\n    position: 'absolute',\n    top: '100px',\n    right: 0,\n  },\n  rightArm: {\n    width: '100px',\n    height: '10px',\n    backgroundColor: 'black',\n    position: 'absolute',\n    top: '150px',\n    right: '-100px',\n    rotate: '-30deg',\n    transformOrigin: 'left bottom',\n  },\n  leftArm: {\n    width: '100px',\n    height: '10px',\n    backgroundColor: 'black',\n    position: 'absolute',\n    top: '150px',\n    right: '10px',\n    rotate: '30deg',\n    transformOrigin: 'right bottom',\n  },\n  rightLeg: {\n    width: '100px',\n    height: '10px',\n    backgroundColor: 'black',\n    position: 'absolute',\n    top: '190px',\n    right: '-90px',\n    transformOrigin: 'left bottom',\n  },\n  leftLeg: {\n    width: '100px',\n    height: '10px',\n    background: 'black',\n    position: 'absolute',\n    top: '210px',\n    right: 0,\n    rotate: '-60deg',\n    transformOrigin: 'right bottom',\n  },\n});\nconst HEAD = <View style={styles.head} />;\n\nconst BODY = <View style={styles.body} />;\n\nconst RIGHT_ARM = <View style={styles.rightArm} />;\n\nconst LEFT_ARM = <View style={styles.leftArm} />;\n\nconst RIGHT_LEG = (\n  <View\n    style={[\n      styles.rightLeg,\n      {\n        transform: [{ rotate: '60deg' }],\n      },\n    ]}\n  />\n);\nconst LEFT_LEG = (\n  <View\n    style={[\n      styles.leftLeg,\n      {\n        transform: [{ rotate: '-60deg' }],\n      },\n    ]}\n  />\n);\n\nconst BODY_PARTS = [HEAD, BODY, RIGHT_ARM, LEFT_ARM, RIGHT_LEG, LEFT_LEG];\n\ntype HangmanDrawingProps = {\n  numberOfGuesses: number;\n};\n\nfunction HangmanDrawing({ numberOfGuesses }: HangmanDrawingProps) {\n  return (\n    <View style={styles.container}>\n      {BODY_PARTS.slice(0, numberOfGuesses)}\n      <View\n        style={{\n          height: '50px',\n          width: '10px',\n          backgroundColor: 'black',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n        }}\n      />\n      <View\n        style={{\n          height: '10px',\n          width: '200px',\n          backgroundColor: 'black',\n          marginLeft: '120px',\n        }}\n      />\n      <View\n        style={{\n          height: '400px',\n          width: '10px',\n          backgroundColor: 'black',\n          marginLeft: '120px',\n        }}\n      />\n      <View\n        style={{ height: '10px', width: '250px', backgroundColor: 'black' }}\n      />\n    </View>\n  );\n}\n\nexport default HangmanDrawing;\n","import { View, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  letterPlaceHolder: {\n    display: 'flex',\n    flexDirection: 'row',\n    gap: '.25em',\n    fontSize: '6rem',\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    fontFamily: 'monospace',\n  },\n  bottom: { borderBottomColor: 'black', borderBottomWidth: 2 },\n});\n\nconst letterStyles = (\n  guessedLetters: string[],\n  letter: string,\n  reveal: boolean\n) =>\n  StyleSheet.create({\n    charStyle: {\n      opacity: guessedLetters.includes(letter) || reveal ? 1 : 0,\n      color: !guessedLetters.includes(letter) && reveal ? 'red' : 'black',\n    },\n  });\n\ntype WordToGuessProps = {\n  guessedLetters: string[];\n  wordToGuess: string;\n  reveal?: boolean;\n};\n\nfunction WordToGuess({\n  guessedLetters,\n  wordToGuess,\n  reveal = false,\n}: WordToGuessProps) {\n  return (\n    <View style={styles.letterPlaceHolder}>\n      {wordToGuess.split('').map((letter, index) => (\n        <View style={styles.bottom} key={index}>\n          <View style={letterStyles(guessedLetters, letter, reveal).charStyle}>\n            {letter}\n          </View>\n        </View>\n      ))}\n    </View>\n  );\n}\nexport default WordToGuess;\n","import { View, StyleSheet, Button } from 'react-native';\n\nconst styles = StyleSheet.create({\n  board: {\n    display: 'flex',\n    flexDirection: 'row',\n    gap: '.5rem',\n    flexWrap: 'wrap',\n    height: 100,\n  },\n  btn: {\n    width: 50,\n    fontSize: 2.5,\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    color: 'black',\n  },\n  active: { backgroundColor: 'hsl(200, 100%, 50%)', color: 'white' },\n  inactive: { opacity: 0.3 },\n});\n\nconst KEYS = [\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n];\n\ntype KeyboardProps = {\n  disabled?: boolean;\n  activeLetters: string[];\n  inactiveLetters: string[];\n  addGuessedLetter: (letter: string) => void;\n};\n\nfunction Keyboard({\n  activeLetters,\n  inactiveLetters,\n  addGuessedLetter,\n  disabled = false,\n}: KeyboardProps) {\n  return (\n    <View style={styles.board}>\n      {KEYS.map((key) => {\n        const isActive = activeLetters.includes(key);\n        const isInactive = inactiveLetters.includes(key);\n        return (\n          <View style={styles.btn}>\n            <Button\n              onPress={() => addGuessedLetter(key)}\n              disabled={isInactive || isActive || disabled}\n              key={key}\n              title={key}\n            />\n          </View>\n        );\n      })}\n    </View>\n  );\n}\n\nexport default Keyboard;\n","import { useCallback, useEffect, useState } from 'react';\nimport HangmanDrawing from './components/hangman-drawing/component';\nimport WordToGuess from './components/word-to-guess/component';\nimport Keyboard from './components/keyboard/component';\nimport words from './words.json';\nimport { View, StyleSheet, Text, Button } from 'react-native';\n\nconst styles = StyleSheet.create({\n  gameContainer: {\n    maxWidth: '800px',\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '2rem',\n    margin: 'auto',\n    alignItems: 'center',\n  },\n  clueContainer: { flexDirection: 'row', gap: 50 },\n  gameResult: { fontSize: 35, textAlign: 'center' },\n  clue: {\n    fontSize: 14,\n    textTransform: 'uppercase',\n    fontWeight: '600',\n  },\n});\n\nfunction getSong() {\n  return words[Math.floor(Math.random() * words.length)];\n}\n\nfunction App() {\n  const [songToGuess, setSongToGuess] = useState(getSong);\n  const songTitle = songToGuess.title;\n\n  const songArtist = songToGuess.artist;\n  const songAlbum = songToGuess.album;\n  const songYear = songToGuess.year;\n\n  const [wordToGuess] = useState(songTitle);\n  const [guessedLetters, setGuessedLetters] = useState<string[]>([]);\n\n  const [showSongArtist, setShowSongArtist] = useState<boolean>(false);\n  const [showSongAlbum, setShowSongAlbum] = useState<boolean>(false);\n  const [showSongYear, setShowSongYear] = useState<boolean>(false);\n\n  const incorrectLetters = guessedLetters.filter(\n    (letter) => !wordToGuess.includes(letter)\n  );\n\n  const isLoser = incorrectLetters.length >= 6;\n  const isWinner = wordToGuess\n    .split('')\n    .every((letter) => guessedLetters.includes(letter));\n\n  const addGuessedLetter = useCallback(\n    (letter: string) => {\n      if (guessedLetters.includes(letter) || isLoser || isWinner) return;\n\n      setGuessedLetters((currentLetters) => [...currentLetters, letter]);\n    },\n    [guessedLetters, isWinner, isLoser]\n  );\n\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      const key = e.key;\n      if (!key.match(/^[a-z]$/)) return;\n\n      e.preventDefault();\n      addGuessedLetter(key);\n    };\n\n    document.addEventListener('keypress', handler);\n\n    return () => {\n      document.removeEventListener('keypress', handler);\n    };\n  }, [guessedLetters]);\n\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      const key = e.key;\n      if (key !== 'Enter') return;\n\n      e.preventDefault();\n      setGuessedLetters([]);\n      setSongToGuess(getSong());\n    };\n\n    document.addEventListener('keypress', handler);\n\n    return () => {\n      document.removeEventListener('keypress', handler);\n    };\n  }, []);\n  function resetGame() {\n    setSongToGuess(getSong());\n    setGuessedLetters(wordToGuess.split());\n    setShowSongArtist(false);\n    setShowSongAlbum(false);\n    setShowSongYear(false);\n  }\n  return (\n    <View style={styles.gameContainer}>\n      <View style={styles.clueContainer}>\n        <View>\n          <Button title=\"REST\" onPress={() => resetGame()} />\n        </View>\n        <View>\n          <Button\n            title=\"show artist\"\n            onPress={() => {\n              setShowSongArtist(true);\n            }}\n          />\n          {showSongArtist ? (\n            <Text style={styles.clue}>{songArtist}</Text>\n          ) : null}\n        </View>\n        <View>\n          <Button\n            title=\"show album\"\n            onPress={() => {\n              setShowSongAlbum(true);\n            }}\n          />\n          {showSongAlbum ? <Text style={styles.clue}>{songAlbum}</Text> : null}\n        </View>\n        <View>\n          <Button\n            title=\"show artist\"\n            onPress={() => {\n              setShowSongYear(true);\n            }}\n          />\n          {showSongYear ? <Text style={styles.clue}>{songYear}</Text> : null}\n        </View>\n      </View>\n      <View>\n        {isWinner ? (\n          <Text style={styles.gameResult}>{isWinner && 'Winner!'}</Text>\n        ) : null}\n        {isLoser ? (\n          <Text style={styles.gameResult}>{isLoser && 'Nice Try'}</Text>\n        ) : null}\n      </View>\n      <HangmanDrawing numberOfGuesses={incorrectLetters.length} />\n      <WordToGuess\n        reveal={isLoser}\n        guessedLetters={guessedLetters}\n        wordToGuess={wordToGuess}\n      />\n      <View style={{ alignSelf: 'stretch' }}>\n        <Keyboard\n          disabled={isWinner || isLoser}\n          activeLetters={guessedLetters.filter((letter) =>\n            wordToGuess.includes(letter)\n          )}\n          inactiveLetters={incorrectLetters}\n          addGuessedLetter={addGuessedLetter}\n        />\n      </View>\n    </View>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}